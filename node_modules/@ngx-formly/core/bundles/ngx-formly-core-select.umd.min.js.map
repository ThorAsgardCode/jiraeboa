{"version":3,"sources":["ng://@ngx-formly/core/select/select-options.pipe.ts","ng://@ngx-formly/core/select/select.module.ts"],"names":["FormlySelectOptionsPipe","prototype","transform","options","field","_this","this","Observable","dispose","observableOf","pipe","map","value","toOptions","ngOnDestroy","gOptions","groups","to","templateOptions","_flatOptions","option","getGroupProp","push","label","group","toOption","item","getLabelProp","getValueProp","disabled","getDisabledProp","labelProp","shouldUseLegacyOption","console","warn","valueProp","key","disabledProp","groupProp","_options","complete","_subscription","unsubscribe","f","fieldChanges","filter","_a","property","type","indexOf","Array","isArray","tap","next","subscribe","BehaviorSubject","asObservable","Pipe","args","name","FormlySelectModule","NgModule","declarations","exports"],"mappings":"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","sourcesContent":["import { OnDestroy, Pipe, PipeTransform } from '@angular/core';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { FormlyFieldConfig } from '@ngx-formly/core';\n\n@Pipe({ name: 'formlySelectOptions' })\nexport class FormlySelectOptionsPipe implements PipeTransform, OnDestroy {\n  private _subscription: Subscription;\n  private _options: BehaviorSubject<any[]>;\n\n  transform(options, field?: FormlyFieldConfig) {\n    if (!(options instanceof Observable)) {\n      options = this.observableOf(options, field);\n    } else {\n      this.dispose();\n    }\n\n    return (options as Observable<any>).pipe(\n      map(value => this.toOptions(value, field || {})),\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.dispose();\n  }\n\n  private toOptions(options, field: FormlyFieldConfig) {\n    const gOptions: any[] = [],\n      groups: { [key: string]: any[] } = {},\n      to = field.templateOptions || {};\n\n    to._flatOptions = true;\n    options.map((option: any) => {\n      if (!this.getGroupProp(option, to)) {\n        gOptions.push(this.toOption(option, to));\n      } else {\n        to._flatOptions = false;\n        if (!groups[this.getGroupProp(option, to)]) {\n          groups[this.getGroupProp(option, to)] = [];\n          gOptions.push({\n            label: this.getGroupProp(option, to),\n            group: groups[this.getGroupProp(option, to)],\n          });\n        }\n        groups[this.getGroupProp(option, to)].push(this.toOption(option, to));\n      }\n    });\n\n    return gOptions;\n  }\n\n  private toOption(item, to) {\n    return {\n      label: this.getLabelProp(item, to),\n      value: this.getValueProp(item, to),\n      disabled: this.getDisabledProp(item, to) || false,\n    };\n  }\n\n  private getLabelProp(item, to): string {\n    if (typeof to.labelProp === 'function') {\n      return to.labelProp(item);\n    }\n\n    if (this.shouldUseLegacyOption(item, to)) {\n      console.warn(`NgxFormly: legacy select option '{key, value}' is deprecated since v5.5, use '{value, label}' instead.`);\n      return item.value;\n    }\n\n    return item[to.labelProp || 'label'];\n  }\n\n  private getValueProp(item, to): string {\n    if (typeof to.valueProp === 'function') {\n      return to.valueProp(item);\n    }\n\n    if (this.shouldUseLegacyOption(item, to)) {\n      return item.key;\n    }\n\n    return item[to.valueProp || 'value'];\n  }\n\n  private getDisabledProp(item, to): string {\n    if (typeof to.disabledProp === 'function') {\n      return to.disabledProp(item);\n    }\n    return item[to.disabledProp || 'disabled'];\n  }\n\n  private getGroupProp(item, to): string {\n    if (typeof to.groupProp === 'function') {\n      return to.groupProp(item);\n    }\n\n    return item[to.groupProp || 'group'];\n  }\n\n  private shouldUseLegacyOption(item, to) {\n    return !to.valueProp\n      && !to.labelProp\n      && item != null\n      && typeof item === 'object'\n      && 'key' in item\n      && 'value' in item;\n  }\n\n  private dispose() {\n    if (this._options) {\n      this._options.complete();\n      this._options = null;\n    }\n\n    if (this._subscription) {\n      this._subscription.unsubscribe();\n      this._subscription = null;\n    }\n  }\n\n  private observableOf(options, f?: FormlyFieldConfig) {\n    this.dispose();\n    if (f && f.options && f.options.fieldChanges) {\n      this._subscription = f.options.fieldChanges.pipe(\n        filter(({ property, type, field }) => {\n          return type === 'expressionChanges'\n            && property.indexOf('templateOptions.options') === 0\n            && field === f\n            && Array.isArray(field.templateOptions.options)\n            && !!this._options;\n        }),\n        tap(() => this._options.next(f.templateOptions.options as any)),\n      ).subscribe();\n    }\n\n    this._options = new BehaviorSubject(options);\n    return this._options.asObservable();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { FormlySelectOptionsPipe } from './select-options.pipe';\n\n@NgModule({\n  declarations: [FormlySelectOptionsPipe],\n  exports: [FormlySelectOptionsPipe],\n})\nexport class FormlySelectModule { }\n"]}